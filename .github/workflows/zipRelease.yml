name: Build and Release Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      CLEAN_VERSION: ${{ format('{0}', github.ref_name) }}
      ZIP_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.zip
      CRX_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.crx

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup Node.js (without dependency installation)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'  # 即使没有lock文件也启用缓存

      # 3. Install only required global tools
      - name: Install global tools
        run: |
          # 跳过package.json依赖安装
          echo "Installing only global tools..."
          npm install -g crx3@3.2.1
          sudo apt-get update && sudo apt-get install -y \
            zip unzip openssl xxd file

      # 4. Debug directory structure
      - name: Debug Directory Structure
        run: |
          echo "=== Workspace Contents ==="
          ls -la
          echo "=== File Tree ==="
          find . -type f

      # 5. Validate extension files
      - name: Validate Extension Files
        run: |
          echo "=== Validating Extension Structure ==="
          [ -f "manifest.json" ] || { echo "::error::manifest.json missing"; exit 1; }
          [ -d "src" ] || { echo "::error::src directory missing"; exit 1; }
          [ -d "icons" ] || { echo "::error::icons directory missing"; exit 1; }
          echo "✓ Basic structure validated"

      # 6. Create ZIP archive
      - name: Create Zip Archive
        run: |
          echo "=== Creating ZIP Archive ==="
          zip -r "${ZIP_OUTPUT}" . \
            -x ".git/*" ".github/*" "*.zip" "*.crx" "*.pem" "README.md" ".*/*" ".DS_Store"
          echo "✓ ZIP created: ${ZIP_OUTPUT}"
          echo "ZIP size: $(du -h "${ZIP_OUTPUT}" | cut -f1)"

      # 7. Create CRX package (Robust Method)
      - name: Create CRX Package
        run: |
          echo "=== Starting CRX Packaging ==="
          
          # Write private key (with validation)
          echo "${{ secrets.PRIVATE_PEM }}" > private-key.pem
          if ! openssl rsa -in private-key.pem -check -noout 2>/dev/null; then
            echo "::error::Invalid private key format"
            head -n 3 private-key.pem
            exit 1
          fi
          echo "✓ Valid private key"

          # Create clean workspace
          TEMP_DIR=$(mktemp -d)
          cp -r manifest.json src icons "$TEMP_DIR"
          cd "$TEMP_DIR"

          # Method 1: Standard packaging
          if crx3 pack . -p "$GITHUB_WORKSPACE/private-key.pem" -o "$GITHUB_WORKSPACE/${CRX_OUTPUT}"; then
            echo "✓ CRX created with standard method"
          else
            echo "Standard method failed, using manual fallback..."
            
            # Method 2: Manual packaging
            cd "$GITHUB_WORKSPACE"
            zip -r extension.zip .
            openssl sha1 -binary < extension.zip > extension.sha1
            openssl rsautl -sign -inkey private-key.pem -in extension.sha1 -out extension.sig
            
            # Build CRX v3 format
            {
              echo -n "Cr24"  # Magic
              printf "\x03\x00\x00\x00"  # Version
              printf "\x00\x00\x00\x00"  # Reserved
              printf "\x00\x00\x00\x00"  # Reserved
              printf "\x00\x00\x00\x00"  # Reserved
              
              # Signature
              sig_size=$(wc -c < extension.sig)
              printf "%08x" $sig_size | xxd -r -p
              cat extension.sig
              
              # ZIP content
              zip_size=$(wc -c < extension.zip)
              printf "%08x" $zip_size | xxd -r -p
              cat extension.zip
            } > "${CRX_OUTPUT}"
            echo "✓ CRX created with manual method"
          fi

          # Final verification
          if [ ! -f "$GITHUB_WORKSPACE/${CRX_OUTPUT}" ]; then
            echo "::error::CRX creation failed"
            exit 1
          fi
          echo "✓ CRX created: ${CRX_OUTPUT}"
          echo "CRX size: $(du -h "${CRX_OUTPUT}" | cut -f1)"

      # 8. Generate changelog
      - name: Generate Changelog
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 "${{ github.ref_name }}"^ 2>/dev/null || echo "")
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "## Changelog ${PREV_TAG:-Initial Release} → ${{ github.ref_name }}" >> $GITHUB_ENV
          git log --pretty=format:"- %s" "${PREV_TAG:+$PREV_TAG..}${{ github.ref_name }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 9. Create release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ${{ env.CHANGELOG }}
            
            ### Build Info
            - Version: ${{ github.ref_name }}
            - Built at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          files: |
            ${{ env.ZIP_OUTPUT }}
            ${{ env.CRX_OUTPUT }}