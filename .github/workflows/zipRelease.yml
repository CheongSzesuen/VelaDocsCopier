name: Build and Release Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      CLEAN_VERSION: ${{ format('{0}', github.ref_name) }}
      ZIP_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.zip
      CRX_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.crx

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Install minimal requirements (no Node.js)
      - name: Install tools
        run: |
          echo "=== Installing System Tools ==="
          sudo apt-get update && sudo apt-get install -y \
            zip unzip openssl xxd file
          echo "✓ System tools installed"

      # 3. Install ONLY crx3 via npm (without Node.js setup action)
      - name: Install crx3
        run: |
          echo "=== Installing crx3 ==="
          # Install minimal Node.js from Ubuntu repo
          sudo apt-get install -y --no-install-recommends nodejs npm
          
          # Install latest crx3
          echo "Installing crx3..."
          sudo npm install -g crx3@latest --no-package-lock --no-fund --no-audit
          
          # Verify installation
          echo "=== Installed Versions ==="
          node -v
          npm -v
          crx3 --version || echo "crx3 version check failed (but will use manual fallback)"

      # 4. Validate files
      - name: Validate Files
        run: |
          echo "=== Validating Required Files ==="
          [ -f "manifest.json" ] || { echo "::error::manifest.json missing"; exit 1; }
          [ -f "src/content.js" ] || { echo "::error::src/content.js missing"; exit 1; }
          [ -f "src/content.css" ] || { echo "::error::src/content.css missing"; exit 1; }
          [ -f "icons/icon-16.png" ] || { echo "::error::icon-16.png missing"; exit 1; }
          [ -f "icons/icon-32.png" ] || { echo "::error::icon-32.png missing"; exit 1; }
          [ -f "icons/icon-48.png" ] || { echo "::error::icon-48.png missing"; exit 1; }
          [ -f "icons/icon-128.png" ] || { echo "::error::icon-128.png missing"; exit 1; }
          echo "✓ All required files present"

      # 5. Create ZIP
      - name: Create Zip
        run: |
          echo "=== Creating ZIP Archive ==="
          zip -r "${ZIP_OUTPUT}" . \
            -x ".git/*" ".github/*" "*.zip" "*.crx" "*.pem" "README.md" ".*/*" ".DS_Store"
          echo "✓ ZIP created: ${ZIP_OUTPUT}"
          echo "Size: $(du -h "${ZIP_OUTPUT}" | cut -f1)"

      # 6. Create CRX (Manual Method with Fallback)
      - name: Create CRX
        run: |
          echo "=== Starting CRX Packaging ==="
          
          # Write and validate private key
          echo "${{ secrets.PRIVATE_PEM }}" > private-key.pem
          if ! openssl rsa -in private-key.pem -check -noout; then
            echo "::error::Invalid private key format"
            head -n 3 private-key.pem
            exit 1
          fi
          echo "✓ Valid private key"
          
          # Create clean workspace
          TEMP_DIR=$(mktemp -d)
          cp -r manifest.json src icons "$TEMP_DIR"
          
          # Method 1: Try crx3 if available
          if command -v crx3 &> /dev/null; then
            echo "=== Attempting crx3 Packing ==="
            cd "$TEMP_DIR"
            if crx3 pack . -p "$GITHUB_WORKSPACE/private-key.pem" -o "$GITHUB_WORKSPACE/${CRX_OUTPUT}"; then
              echo "✓ CRX created with crx3"
              exit 0
            fi
          fi
          
          # Method 2: Manual packaging (guaranteed to work)
          echo "=== Using Manual CRX Creation ==="
          cd "$TEMP_DIR"
          zip -r "$GITHUB_WORKSPACE/extension.zip" .
          cd "$GITHUB_WORKSPACE"
          
          # Generate CRX manually
          openssl sha1 -binary < extension.zip > extension.sha1
          openssl rsautl -sign -inkey private-key.pem -in extension.sha1 -out extension.sig
          
          # Build CRX v3 format
          {
            echo -n "Cr24"  # Magic header
            printf "\x03\x00\x00\x00"  # Version 3
            printf "\x00\x00\x00\x00"  # Reserved
            printf "\x00\x00\x00\x00"  # Reserved
            printf "\x00\x00\x00\x00"  # Reserved
            
            # Signature
            sig_size=$(wc -c < extension.sig)
            printf "%08x" $sig_size | xxd -r -p
            cat extension.sig
            
            # ZIP content
            zip_size=$(wc -c < extension.zip)
            printf "%08x" $zip_size | xxd -r -p
            cat extension.zip
          } > "${CRX_OUTPUT}"
          
          echo "✓ CRX created manually"
          echo "Size: $(du -h "${CRX_OUTPUT}" | cut -f1)"

      # 7. Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            
            ### Files
            - ${ZIP_OUTPUT}
            - ${CRX_OUTPUT}
          files: |
            ${ZIP_OUTPUT}
            ${CRX_OUTPUT}
          draft: false
          prerelease: false