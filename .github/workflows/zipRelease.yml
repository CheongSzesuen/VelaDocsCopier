name: Build and Release Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      CLEAN_VERSION: ${{ format('{0}', github.ref_name) }}
      ZIP_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.zip
      CRX_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.crx

    steps:
      # 1. Checkout code with full history
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3. Install crx3 packaging tool
      - name: Install crx3
        run: npm install -g crx3

      # 4. Debug: Show complete workspace structure
      - name: Debug Workspace Structure
        run: |
          echo "=== Workspace Path ==="
          echo "$GITHUB_WORKSPACE"
          echo "=== Directory Structure ==="
          ls -la
          echo "=== Manifest Content ==="
          cat manifest.json
          echo "=== All Files Tree ==="
          find . -type f -print
          echo "=== File Permissions ==="
          ls -la manifest.json src/content.js src/content.css icons/

      # 5. Validate all required files
      - name: Validate Required Files
        run: |
          echo "=== Validating Required Files ==="
          required_files=(
            "manifest.json"
            "src/content.js"
            "src/content.css"
            "icons/icon-16.png"
            "icons/icon-32.png"
            "icons/icon-48.png"
            "icons/icon-128.png"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "::error::Missing required file: $file"
              echo "Current directory: $(pwd)"
              ls -la $(dirname "$file")
              exit 1
            else
              echo "‚úì $file exists"
            fi
          done

      # 6. Create ZIP archive
      - name: Create Zip Archive
        run: |
          echo "=== Creating ZIP Archive ==="
          CLEAN_VERSION=${CLEAN_VERSION#v}
          excluded_items=(
            ".git/*"
            ".github/*"
            "*.zip"
            "*.crx"
            "*.pem"
            "README.md"
            ".*/*"
            ".DS_Store"
          )
          
          echo "Excluding: ${excluded_items[@]}"
          zip -r ${ZIP_OUTPUT} . -x "${excluded_items[@]}"
          
          echo "=== ZIP Contents ==="
          unzip -l ${ZIP_OUTPUT} | head -20

      # 7. Create CRX package (Fixed Solution)
      - name: Create CRX Package
        run: |
          echo "=== Starting CRX Packaging ==="
          
          # Write private key to file
          echo "${{ secrets.PRIVATE_PEM }}" > private-key.pem
          echo "Private key written to private-key.pem"
          
          # Create clean temporary directory
          TEMP_DIR=$(mktemp -d)
          echo "Created temp directory: $TEMP_DIR"
          
          # Copy only necessary files
          echo "Copying required files to temp directory..."
          cp -v manifest.json "$TEMP_DIR/"
          cp -rv src "$TEMP_DIR/"
          cp -rv icons "$TEMP_DIR/"
          
          # Verify files in temp directory
          echo "=== Temp Directory Contents ==="
          ls -la "$TEMP_DIR"
          echo "=== Temp Manifest Content ==="
          cat "$TEMP_DIR/manifest.json"
          
          # Package from temp directory
          echo "=== Packaging CRX ==="
          cd "$TEMP_DIR"
          crx3 pack . \
            -p private-key.pem \
            -o "$GITHUB_WORKSPACE/${CRX_OUTPUT}" \
            -x .git/\* .github/\* *.zip *.pem README.md .*/\* .DS_Store
          
          # Verify output
          echo "=== Verifying CRX Output ==="
          if [ -f "$GITHUB_WORKSPACE/${CRX_OUTPUT}" ]; then
            echo "‚úì CRX file created successfully"
            ls -la "$GITHUB_WORKSPACE/${CRX_OUTPUT}"
          else
            echo "::error::Failed to create CRX file"
            echo "Current directory: $(pwd)"
            ls -la
            exit 1
          fi

      # 8. Generate changelog from git history
      - name: Generate Changelog
        id: changelog
        run: |
          echo "=== Generating Changelog ==="
          git fetch --tags
          TAGS=$(git tag --sort=-v:refname)
          
          PREV_RELEASE=""
          CURRENT_TAG="${{ github.ref_name }}"
          found_current=false
          
          for tag in $TAGS; do
            if [ "$found_current" = true ]; then
              PREV_RELEASE=$tag
              break
            fi
            if [ "$tag" = "$CURRENT_TAG" ]; then
              found_current=true
            fi
          done
          
          echo "CHANGELOG_TITLE<<EOF" >> $GITHUB_ENV
          echo "## üìù Changelog ${PREV_RELEASE:-Initial Release} ‚Üí ${{ github.ref_name }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "CHANGELOG_BODY<<EOF" >> $GITHUB_ENV
          git log --pretty=format:"- %s (by %an on %ad)" \
            --date=format:"%Y-%m-%d" \
            ${PREV_RELEASE:+$PREV_RELEASE..}${{ github.ref_name }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "=== Changelog Generated ==="
          echo "$CHANGELOG_TITLE"
          echo "$CHANGELOG_BODY" | head -10

      # 9. Collect build metadata
      - name: Gather Metadata
        id: meta
        run: |
          echo "=== Gathering Metadata ==="
          # Build time (UTC+8)
          echo "time=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          
          # Short commit ID
          echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          
          # File sizes
          echo "zip_size=$(du -h ${ZIP_OUTPUT} | cut -f1)" >> $GITHUB_OUTPUT
          echo "crx_size=$(du -h ${CRX_OUTPUT} | cut -f1)" >> $GITHUB_OUTPUT
          
          echo "Metadata collected:"
          echo "time: ${{ steps.meta.outputs.time }}"
          echo "commit: ${{ steps.meta.outputs.short_sha }}"
          echo "zip_size: ${{ steps.meta.outputs.zip_size }}"
          echo "crx_size: ${{ steps.meta.outputs.crx_size }}"

      # 10. Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: üöÄ Release ${{ github.ref_name }}
          body: |
            ${{ env.CHANGELOG_TITLE }}
            ${{ env.CHANGELOG_BODY }}

            ## üîß Build Information
            - üïí Build Time: ${{ steps.meta.outputs.time }} (UTC+8)
            - üè∑Ô∏è Tag: ${{ github.ref_name }}
            - üîó Commit: [${{ steps.meta.outputs.short_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - üì¶ Files:
              - ${ZIP_OUTPUT} (${{ steps.meta.outputs.zip_size }})
              - ${CRX_OUTPUT} (${{ steps.meta.outputs.crx_size }})
          files: |
            ${ZIP_OUTPUT}
            ${CRX_OUTPUT}
          draft: false
          prerelease: false