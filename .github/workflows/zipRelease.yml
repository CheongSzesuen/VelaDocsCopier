name: Build and Release Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      # Clean version (remove 'v' prefix)
      CLEAN_VERSION: ${{ format('{0}', github.ref_name) }}
      # Output file names
      ZIP_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.zip
      CRX_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.crx

    steps:
      # 1. Checkout code with full history
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup Node.js (for crx3 tool)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3. Install crx3 tool
      - name: Install crx3
        run: npm install -g crx3

      # 4. Create ZIP file (exclude .git, .github, README.md and other dotfiles)
      - name: Create Zip Archive
        run: |
          # Remove 'v' prefix from version if present
          CLEAN_VERSION=${CLEAN_VERSION#v}
          # Create zip excluding specific files
          zip -r ${ZIP_OUTPUT} . \
            -x .git/\* .github/\* *.zip *.crx *.pem README.md .*/\* .DS_Store

      # 5. Create CRX file using the private key from secrets
      - name: Create CRX Package
        run: |
          # Write private key to file
          echo "${{ secrets.PRIVATE_PEM }}" > private-key.pem
          # Package extension with crx3
          crx3 pack . -p private-key.pem -o ${CRX_OUTPUT}
          # Verify CRX was created
          if [ ! -f "${CRX_OUTPUT}" ]; then
            echo "::error::Failed to create CRX file"
            exit 1
          fi

      # 6. Generate changelog
      - name: Generate Changelog
        id: changelog
        run: |
          # Get all tags sorted by version
          git fetch --tags
          TAGS=$(git tag --sort=-v:refname)
          
          # Find previous release tag
          PREV_RELEASE=""
          CURRENT_TAG="${{ github.ref_name }}"
          found_current=false
          
          for tag in $TAGS; do
            if [ "$found_current" = true ]; then
              PREV_RELEASE=$tag
              break
            fi
            if [ "$tag" = "$CURRENT_TAG" ]; then
              found_current=true
            fi
          done
          
          # Generate formatted changelog
          CHANGELOG_TITLE="## üìù Changelog ${PREV_RELEASE:-Initial Release} ‚Üí ${{ github.ref_name }}"
          CHANGELOG_BODY=$(git log --pretty=format:"- %s (by %an on %ad)" \
            --date=format:"%Y-%m-%d" \
            ${PREV_RELEASE:+$PREV_RELEASE..}${{ github.ref_name }})
          
          # Set environment variables
          echo "CHANGELOG_TITLE<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_TITLE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "CHANGELOG_BODY<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 7. Gather metadata
      - name: Gather metadata
        id: meta
        run: |
          # Build time (UTC+8)
          echo "time=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          
          # Get short commit ID
          echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          
          # Get file sizes
          echo "zip_size=$(du -h ${ZIP_OUTPUT} | cut -f1)" >> $GITHUB_OUTPUT
          echo "crx_size=$(du -h ${CRX_OUTPUT} | cut -f1)" >> $GITHUB_OUTPUT

      # 8. Create GitHub Release with both files
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: üöÄ Release ${{ github.ref_name }}
          body: |
            ${{ env.CHANGELOG_TITLE }}
            ${{ env.CHANGELOG_BODY }}

            ## üîß Build Information
            - üïí Build Time: ${{ steps.meta.outputs.time }} (UTC+8)
            - üè∑Ô∏è Tag: ${{ github.ref_name }}
            - üîó Commit: [${{ steps.meta.outputs.short_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - üì¶ Files:
              - ${ZIP_OUTPUT} (${{ steps.meta.outputs.zip_size }})
              - ${CRX_OUTPUT} (${{ steps.meta.outputs.crx_size }})
          files: |
            ${ZIP_OUTPUT}
            ${CRX_OUTPUT}
          draft: false
          prerelease: false
