name: Build and Release Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      CLEAN_VERSION: ${{ format('{0}', github.ref_name) }}
      ZIP_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.zip
      CRX_OUTPUT: VelaDocsCopier-${CLEAN_VERSION#v}.crx

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3. Install crx3 tool
      - name: Install crx3
        run: npm install -g crx3

      # 4. Debug directory structure
      - name: Debug Directory Structure
        run: |
          echo "=== Workspace Contents ==="
          ls -la
          echo "=== Manifest Content ==="
          cat manifest.json
          echo "=== File Tree ==="
          find . -type f

      # 5. Verify files
      - name: Verify Required Files
        run: |
          required_files=(
            "manifest.json"
            "src/content.js"
            "src/content.css"
            "icons/icon-16.png"
            "icons/icon-32.png"
            "icons/icon-48.png"
            "icons/icon-128.png"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "::error::Missing file: $file"
              ls -la $(dirname "$file")
              exit 1
            fi
          done

      # 6. Create ZIP
      - name: Create Zip Archive
        run: |
          zip -r ${ZIP_OUTPUT} . \
            -x .git/\* .github/\* *.zip *.crx *.pem README.md .*/\* .DS_Store

      # 7. Create CRX - ULTIMATE SOLUTION
      - name: Create CRX Package
        run: |
          # Write private key
          echo "${{ secrets.PRIVATE_PEM }}" > private-key.pem
          
          # Create clean workspace
          TEMP_DIR=$(mktemp -d)
          cp -r manifest.json src icons $TEMP_DIR/
          
          # WORKAROUND: First create a zip file
          cd $TEMP_DIR
          zip -r ../extension.zip .
          
          # Then convert to CRX using the zip
          cd $GITHUB_WORKSPACE
          crx3 extension.zip -p private-key.pem -o ${CRX_OUTPUT}
          
          # Verify output
          if [ ! -f "${CRX_OUTPUT}" ]; then
            echo "::error::CRX creation failed"
            ls -la
            exit 1
          fi
          
          echo "=== CRX File Info ==="
          ls -la ${CRX_OUTPUT}

      # 8. Generate changelog
      - name: Generate Changelog
        id: changelog
        run: |
          git fetch --tags
          TAGS=$(git tag --sort=-v:refname)
          
          PREV_RELEASE=""
          CURRENT_TAG="${{ github.ref_name }}"
          found_current=false
          
          for tag in $TAGS; do
            if [ "$found_current" = true ]; then
              PREV_RELEASE=$tag
              break
            fi
            if [ "$tag" = "$CURRENT_TAG" ]; then
              found_current=true
            fi
          done
          
          echo "CHANGELOG_TITLE<<EOF" >> $GITHUB_ENV
          echo "## üìù Changelog ${PREV_RELEASE:-Initial Release} ‚Üí ${{ github.ref_name }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "CHANGELOG_BODY<<EOF" >> $GITHUB_ENV
          git log --pretty=format:"- %s (by %an on %ad)" \
            --date=format:"%Y-%m-%d" \
            ${PREV_RELEASE:+$PREV_RELEASE..}${{ github.ref_name }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 9. Gather metadata
      - name: Gather metadata
        id: meta
        run: |
          echo "time=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
          echo "zip_size=$(du -h ${ZIP_OUTPUT} | cut -f1)" >> $GITHUB_OUTPUT
          echo "crx_size=$(du -h ${CRX_OUTPUT} | cut -f1)" >> $GITHUB_OUTPUT

      # 10. Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: üöÄ Release ${{ github.ref_name }}
          body: |
            ${{ env.CHANGELOG_TITLE }}
            ${{ env.CHANGELOG_BODY }}

            ## üîß Build Information
            - üïí Build Time: ${{ steps.meta.outputs.time }} (UTC+8)
            - üè∑Ô∏è Tag: ${{ github.ref_name }}
            - üîó Commit: [${{ steps.meta.outputs.short_sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - üì¶ Files:
              - ${ZIP_OUTPUT} (${{ steps.meta.outputs.zip_size }})
              - ${CRX_OUTPUT} (${{ steps.meta.outputs.crx_size }})
          files: |
            ${ZIP_OUTPUT}
            ${CRX_OUTPUT}
          draft: false
          prerelease: false