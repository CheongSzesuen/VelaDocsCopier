name: Build ZIP on Tag Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-zip:
    runs-on: ubuntu-latest
    env:
      BUILD_OUTPUT: VelaDocsCopier-${{ format('{0}', github.ref_name) }}.zip
      VERSION: ${{ format('{0}', github.ref_name) }}
      TEMP_DIR: ${{ github.workspace }}/.temp_build

    steps:
      # 1. 代码检出（保留完整git历史）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 使用 rsync 准备打包目录（排除不需要的文件）
      - name: Prepare build directory
        run: |
          mkdir -p "$TEMP_DIR"
          rsync -r --exclude='README.md' --exclude='.DS_Store' --exclude='.git' \
            icons/ manifest.json src/ "$TEMP_DIR/"

      # 3. 打包为 ZIP
      - name: Create ZIP archive
        run: |
          cd "$TEMP_DIR" && zip -r "../${BUILD_OUTPUT}" .
          echo "Built ZIP: ${BUILD_OUTPUT}"

      # 4. 精确匹配的更新日志生成（与原 Action 保持一致）
      - name: Generate precise changelog
        id: changelog
        run: |
          # 获取上一个release的tag
          PREV_RELEASE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ ${{ github.repository }}/releases/latest" | \
            jq -r '.tag_name // empty')

          # 生成精确格式的日志
          CHANGELOG_TITLE="## 📝 更新日志 ${PREV_RELEASE:-初始版本} → ${{ github.ref_name }}"
          CHANGELOG_BODY=$(git log --pretty=format:"- **%s**%n  贡献者：%an <%ae>%n  提交时间：%ad%n  %b" \
            --date=format:"%Y-%m-%d %H:%M:%S" \
            ${PREV_RELEASE:+$PREV_RELEASE..}${{ github.ref_name }} | \
            sed '/^  $/d' | \
            sed 's/^  $$BUG$$/[BUG]/')

          echo "CHANGELOG_TITLE=${CHANGELOG_TITLE}" >> "$GITHUB_ENV"
          echo "CHANGELOG_BODY=${CHANGELOG_BODY}" >> "$GITHUB_ENV"

      # 5. 获取构建元数据
      - name: Gather metadata
        id: meta
        run: |
          # 构建时间（UTC+8）
          echo "time=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_OUTPUT"

          # 签名状态（此处为插件，不签名）
          echo "sign_status=无签名需求" >> "$GITHUB_OUTPUT"

          # 获取commit短ID
          echo "short_sha=$(git rev-parse --short "${{ github.sha }}")" >> "$GITHUB_OUTPUT"

      # 6. 创建格式化的 GitHub Release
      - name: Create Formatted Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: 🎉 Release ${{ github.ref_name }}
          body: |
            ${{ env.CHANGELOG_TITLE }}
            ${{ env.CHANGELOG_BODY }}

            ## 🛠️ 构建信息
            - 🕒 构建时间: ${{ steps.meta.outputs.time }} (UTC+8)
            - 🏷️ 标签: ${{ github.ref_name }}
            - 🔗 提交: [${{ steps.meta.outputs.short_sha }}](https://github.com/ ${{ github.repository }}/commit/${{ github.sha }})
            - 🔐 签名状态: ${{ steps.meta.outputs.sign_status }}
            - 📦 构建产物: ${{ env.BUILD_OUTPUT }}
          files: ${{ env.BUILD_OUTPUT }}
          draft: false
          prerelease: false