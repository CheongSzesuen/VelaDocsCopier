name: Build and Release Extension
on:
  push:
    tags:
      - 'v*'
jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      CLEAN_VERSION: ${{ format('{0}', github.ref_name) }}
      ZIP_OUTPUT: VelaDocsCopier-${{ env.CLEAN_VERSION }}.zip
      CRX_OUTPUT: VelaDocsCopier-${{ env.CLEAN_VERSION }}.crx
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Install crx3 tool and required tools
      - name: Install crx3 and dependencies
        run: |
          echo "=== Installing Minimal Requirements ==="
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            nodejs zip unzip openssl xxd file

          echo "Installing npm..."
          sudo apt-get install -y npm

          echo "Installing crx3..."
          sudo npm install -g crx3 --no-package-lock --no-fund --no-audit

          echo "=== Installed Versions ==="
          node -v
          npm -v
          crx3 --version

      # 3. Validate files
      - name: Validate Files
        run: |
          echo "=== Validating Files ==="
          [ -f "manifest.json" ] || { echo "::error::manifest.json missing"; exit 1; }
          [ -f "src/content.js" ] || { echo "::error::src/content.js missing"; exit 1; }
          [ -f "src/content.css" ] || { echo "::error::src/content.css missing"; exit 1; }
          [ -f "icons/icon-16.png" ] || { echo "::error::icon-16.png missing"; exit 1; }
          [ -f "icons/icon-32.png" ] || { echo "::error::icon-32.png missing"; exit 1; }
          [ -f "icons/icon-48.png" ] || { echo "::error::icon-48.png missing"; exit 1; }
          [ -f "icons/icon-128.png" ] || { echo "::error::icon-128.png missing"; exit 1; }
          echo "✓ All required files present"

      # 4. Create ZIP
      - name: Create Zip
        run: |
          echo "=== Creating ZIP ==="
          zip -r "${ZIP_OUTPUT}" . \
            -x ".git/*" ".github/*" "*.zip" "*.crx" "*.pem" "README.md" ".*/*" ".DS_Store"
          echo "✓ ZIP created: ${ZIP_OUTPUT}"
          echo "Size: $(du -h "${ZIP_OUTPUT}" | cut -f1)"

      # 5. Create CRX (Manual Method Only)
      - name: Create CRX
        run: |
          echo "=== Creating CRX ==="
          # Write and validate private key
          echo "${{ secrets.PRIVATE_PEM }}" > private-key.pem
          if ! openssl rsa -in private-key.pem -check -noout; then
            echo "::error::Invalid private key"
            head -n 3 private-key.pem
            exit 1
          fi
          echo "✓ Valid private key"

          # Create extension.zip
          echo "Creating extension.zip..."
          zip -r extension.zip . \
            -x ".git/*" ".github/*" "*.zip" "*.crx" "*.pem" "README.md" ".*/*" ".DS_Store"

          # Generate CRX manually
          echo "Generating CRX..."
          openssl sha1 -binary < extension.zip > extension.sha1
          openssl rsautl -sign -inkey private-key.pem -in extension.sha1 -out extension.sig

          # Build CRX v3 format
          {
            echo -n "Cr24"  # Magic
            printf "\x03\x00\x00\x00"  # Version
            printf "\x00\x00\x00\x00"  # Reserved
            printf "\x00\x00\x00\x00"  # Reserved
            printf "\x00\x00\x00\x00"  # Reserved

            # Signature
            sig_size=$(wc -c < extension.sig)
            printf "%08x" $sig_size | xxd -r -p
            cat extension.sig

            # ZIP content
            zip_size=$(wc -c < extension.zip)
            printf "%08x" $zip_size | xxd -r -p
            cat extension.zip
          } > "${CRX_OUTPUT}"

          echo "✓ CRX created: ${CRX_OUTPUT}"
          echo "Size: $(du -h "${CRX_OUTPUT}" | cut -f1)"

      # 6. Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            ### Files
            - ${ZIP_OUTPUT}
            - ${CRX_OUTPUT}
          files: |
            ${ZIP_OUTPUT}
            ${CRX_OUTPUT}
          draft: false
          prerelease: false